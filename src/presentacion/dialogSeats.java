/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JDialog.java to edit this template
 */
package presentacion;
import java.awt.Component;
import java.util.List;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import logic.actualData;
import objects.Historial;

/**
 *
 * @author Juanelas
 */
public class dialogSeats extends javax.swing.JDialog {
        private static DefaultTableModel model;
        private static DefaultTableModel model2;
        private static DefaultTableModel model3;
    /**
     * Creates new form dialogSeats
     */
    public dialogSeats(java.awt.Dialog parent, boolean modal) {
        super(parent, modal);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        Object[][] data = new Object[6][6];  // Arreglo bidimensional de 6x6
        String[] columnNames = {"A", "B", "C", "D", "E", "F"};  // Nombres de las columnas (opcional)

        // Crear el modelo de tabla con los datos y nombres de las columnas
        DefaultTableModel model = new DefaultTableModel(data, columnNames);
        jTable1.setModel(model);
        jScrollPane1.setViewportView(jTable1);

        jTable2.setModel(model);
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 365, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    public void editCells(int id1, int id2) {
        if(id2 == 0){
            jTable2.setVisible(false);
        }
        int[][] matriz = new int[6][6];
        int[][] matriz2 = new int[6][6];
        actualData dataActual = new actualData();
        List<Historial> histories = dataActual.getFlightHistory();
        for(Historial ticketActual:histories){
            if(ticketActual.getIdFlight() == id1){
                String actualSeats[] = ticketActual.getSeats().split("-");
                for (int i = 0; i < actualSeats.length; i++) {
                    // Verificar si es el último elemento
                    if (i == actualSeats.length - 1) {
                        asignarAsientosAMatriz(actualSeats[i], matriz, true);
                    } else {
                        asignarAsientosAMatriz(actualSeats[i], matriz, false);
                    }
                    
}
            }
            else if(ticketActual.getIdFlight() == id2){
               String actualSeats[] = ticketActual.getSeats().split("-");
                for (int i = 0; i < actualSeats.length; i++) {
                    // Verificar si es el último elemento
                    if (i == actualSeats.length - 1) {
                        asignarAsientosAMatriz(actualSeats[i], matriz2, true);
                    } else {
                        asignarAsientosAMatriz(actualSeats[i], matriz2, false);
                    }
                    
} 
            }
            
        }
        rellenarMatriz(matriz);
        imprimirMatriz(matriz);
        if(id2 != 0){
            rellenarMatriz(matriz2);
            imprimirMatriz(matriz2);
            jTable2.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                       boolean hasFocus, int row, int column) {
            Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            if (matriz2[row][column] == 1) {
                cell.setBackground(Color.GREEN);  // Ocupado
            } else if (matriz2[row][column] == 2) {
                cell.setBackground(Color.RED);  // Inhabilitado
            } else {
                cell.setBackground(Color.WHITE);  // Libre
            }

            return cell;
        }
    });
        }
    jTable1.setDefaultRenderer(Object.class, new DefaultTableCellRenderer() {
        @Override
        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected,
                                                       boolean hasFocus, int row, int column) {
            Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

            if (matriz[row][column] == 1) {
                cell.setBackground(Color.GREEN);  // Ocupado
            } else if (matriz[row][column] == 2) {
                cell.setBackground(Color.RED);  // Inhabilitado
            } else {
                cell.setBackground(Color.WHITE);  // Libre
            }

            return cell;
        }
    });
}
    public void asignarAsientosAMatriz(String seat, int[][] matriz, boolean ultimo) {
    int coordenadaX = -1;
    int coordenadaY = -1;
    
    // Determine la columna (X) basada en el primer carácter
    switch (seat.charAt(0)) {
        case 'A': coordenadaX = 0; break;
        case 'B': coordenadaX = 1; break;
        case 'C': coordenadaX = 2; break;
        case 'D': coordenadaX = 3; break;
        case 'E': coordenadaX = 4; break;
        case 'F': coordenadaX = 5; break;
        default: 
            System.err.println("Error: Carácter inesperado para la columna en el asiento: " + seat);
            coordenadaX = -1;
    }

    // Determine la fila (Y) basada en el segundo carácter
    if (seat.length() > 1) {
        switch (seat.charAt(1)) {
            case '1': coordenadaY = 0; break;
            case '2': coordenadaY = 1; break;
            case '3': coordenadaY = 2; break;
            case '4': coordenadaY = 3; break;
            case '5': coordenadaY = 4; break;
            case '6': coordenadaY = 5; break;
            default:
                System.err.println("Error: Carácter inesperado para la fila en el asiento: " + seat);
                coordenadaY = -1;
        }
    } else {
        System.err.println("Error: El asiento no tiene un formato correcto: " + seat);
    }

    // Solo asigna en la matriz si las coordenadas son válidas
    if (coordenadaX >= 0 && coordenadaY >= 0) {
        System.out.println("Asignando " + (ultimo ? "Inhabilitado" : "Ocupado") + " en " + seat + " (" + coordenadaX + "," + coordenadaY + ")");
        if (ultimo) {
            matriz[coordenadaX][coordenadaY] = 2; // El último asiento se marca como inhabilitado
        } else {
            matriz[coordenadaX][coordenadaY] = 1; // Asiento ocupado
        }
    } else {
        System.err.println("Coordenadas inválidas para el asiento: " + seat);
    }
}
    private void rellenarMatriz(int[][] matriz) {
    for (int i = 0; i < matriz.length; i++) {
        for (int j = 0; j < matriz[i].length; j++) {
            if (matriz[i][j] != 1 && matriz[i][j] != 2) {
                matriz[i][j] = 0;
            }
        }
    }
}
    private void imprimirMatriz(int[][] matriz) {
    System.out.println("Estado de la Matriz:");
    for (int i = 0; i < matriz.length; i++) {
        for (int j = 0; j < matriz[i].length; j++) {
            System.out.print(matriz[i][j] + " ");
        }
        System.out.println();
    }
}
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(dialogSeats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(dialogSeats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(dialogSeats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(dialogSeats.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the dialog */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                dialogSeats dialog = new dialogSeats(new javax.swing.JDialog(), true);
                dialog.addWindowListener(new java.awt.event.WindowAdapter() {
                    @Override
                    public void windowClosing(java.awt.event.WindowEvent e) {
                        System.exit(0);
                    }
                });
                dialog.setVisible(true);
            }
        });
    }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
}
